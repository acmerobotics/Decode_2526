# This workflow will build a debug APK of an Android project.

name: Android CI

on:
  push:
    branches: [ '**' ] # Trigger the workflow on pushes to any branch
  pull_request:
    branches: [ '**' ] # Trigger the workflow on pull requests targeting any branch

jobs:
  build:
    runs-on: ubuntu-latest # Use the latest version of Ubuntu as the runner

    steps:
      # Step 1: Check out the repository's code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up Java
      # This is necessary to build the Android project.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # Step 3: Grant execute permissions to the Gradle wrapper
      # This is often required on Linux-based runners.
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Step 4: Build the debug APK
      - name: Build with Gradle
        run: ./gradlew assembleDebug

      # Step 5: Find the generated APK file, no matter where it is
      - name: Find the APK file
        id: find_apk_step
        run: |
          APK_PATH=$(find . -type f -name 'app-debug.apk' | head -n 1)
          if [ -z "$APK_PATH" ]; then
            echo "::error::Could not find the 'app-debug.apk' file after the build. Check the build logs for errors."
            exit 1
          fi
          echo "Found APK at: $APK_PATH"
          echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT

      # Step 6: Upload the generated APK as a workflow artifact
      # We now use the path found in the previous step
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: ${{ steps.find_apk_step.outputs.apk_path }}
